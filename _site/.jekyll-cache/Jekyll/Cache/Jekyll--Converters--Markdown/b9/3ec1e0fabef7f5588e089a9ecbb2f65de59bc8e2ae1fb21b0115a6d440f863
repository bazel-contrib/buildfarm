I"<p>ActionCahe is a service that can be used to query whether a defined action has already been executed and, if so, download its result. The service API is defined in the <a href="https://github.com/bazelbuild/remote-apis">Remote Execution API</a>. <code class="language-plaintext highlighter-rouge">ActionCache</code> service would require <a href="https://github.com/bazelbuild/bazel-buildfarm/wiki/ContentAddressableStorage"><code class="language-plaintext highlighter-rouge">ContentAddressableStorage</code></a> service to store file data.</p>

<p>An <code class="language-plaintext highlighter-rouge">Action</code> encapsulates all the information required to execute an action. Such information includes the command, input tree containing subdirectory/file tree, environment variables, platform information. All the information will contribute to the digest computation of an <code class="language-plaintext highlighter-rouge">Action</code> so that execution of an <code class="language-plaintext highlighter-rouge">Action</code> multiple times will produce the same output. With this, hash of an <code class="language-plaintext highlighter-rouge">Action</code> can be used as a key to cached <code class="language-plaintext highlighter-rouge">ActionResult</code>, which store result and output of an <code class="language-plaintext highlighter-rouge">Action</code> after an <code class="language-plaintext highlighter-rouge">Action</code> is completed. <code class="language-plaintext highlighter-rouge">ActionResult</code>s can be populated in <code class="language-plaintext highlighter-rouge">ActionCache</code> service after <code class="language-plaintext highlighter-rouge">Action</code>s get completed by an <code class="language-plaintext highlighter-rouge">Execution</code> service. They can also come from a local Bazel client that has executed the <code class="language-plaintext highlighter-rouge">Action</code>s and put the <code class="language-plaintext highlighter-rouge">ActionResults</code> into the cache by using the <code class="language-plaintext highlighter-rouge">UpdateActionCache</code> method. In other words, The <code class="language-plaintext highlighter-rouge">ActionCache</code> service can be used without using/implementing the <code class="language-plaintext highlighter-rouge">Execution</code> service.</p>

<p>By leveraging <code class="language-plaintext highlighter-rouge">Action</code> definition, <code class="language-plaintext highlighter-rouge">ActionCache</code> service is responsible for mapping <code class="language-plaintext highlighter-rouge">Action</code>s to the <code class="language-plaintext highlighter-rouge">ActionResult</code>s.</p>

<h1 id="methods">Methods</h1>

<h2 id="getactionresult">GetActionResult</h2>
<p>Essentially the “get” method, which is responsible for finding an ActionResult and retrieving it. Before invoking this method, Bazel client should compute the input tree and the <code class="language-plaintext highlighter-rouge">Action</code> message for the action needs to be done. Then Bazel can use this <code class="language-plaintext highlighter-rouge">GetActionCache</code> method to see if the action has been completed successfully and, if so, use <code class="language-plaintext highlighter-rouge">bytestream.Read</code> to download the outputs.</p>
<h2 id="updateactionresult">UpdateActionResult</h2>
<p>As mentioned above, the <code class="language-plaintext highlighter-rouge">ActionCache</code> service doesn’t necessarily need an <code class="language-plaintext highlighter-rouge">Execution</code> Service. In this case, a “put” method is required so that an <code class="language-plaintext highlighter-rouge">ActionResult</code> can be directly put into the cache. This is what <code class="language-plaintext highlighter-rouge">UpdateActionResult</code> is designed for. With this method, Bazel clients running different machines can upload their build results into a cache pool, which can be available to other users through <code class="language-plaintext highlighter-rouge">GetActionResult</code>.</p>

<h1 id="buildfarm-implementations">Buildfarm Implementations</h1>

<p>Buildfarm provides implementations of both <code class="language-plaintext highlighter-rouge">ActionCache</code> and <code class="language-plaintext highlighter-rouge">Execution</code>. <code class="language-plaintext highlighter-rouge">ActionResult</code> can be populated through <code class="language-plaintext highlighter-rouge">Execution</code> service or uploaded by local Bazel clients through <code class="language-plaintext highlighter-rouge">UpdataActionCache</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">ActionCache</code> service is hosted on the server-side of Buildfarm. When a <code class="language-plaintext highlighter-rouge">GetActionResultRequest</code> received through <code class="language-plaintext highlighter-rouge">GetActionResult</code> call, by using the <code class="language-plaintext highlighter-rouge">instance_name</code> field of the request, the <code class="language-plaintext highlighter-rouge">ActionCache</code> service will find the <code class="language-plaintext highlighter-rouge">Instance</code> that is supposed to have <code class="language-plaintext highlighter-rouge">ActionResult</code>, and it will find the <code class="language-plaintext highlighter-rouge">Instance</code> and get the <code class="language-plaintext highlighter-rouge">ActionResult</code> asynchronously. Similarly, an <code class="language-plaintext highlighter-rouge">UpdateActionResultRequest</code> will be sent to the <code class="language-plaintext highlighter-rouge">ActionCache</code> service through <code class="language-plaintext highlighter-rouge">UpdateActionResult</code> rpc call. The service will find the <code class="language-plaintext highlighter-rouge">Instance</code> that is supposed to have the <code class="language-plaintext highlighter-rouge">ActionResult</code> through the <code class="language-plaintext highlighter-rouge">instance_name</code> field of the request and update the corresponding instance.</p>

:ET