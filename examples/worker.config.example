# the instance domain that this worker will execute work in
# all requests will be tagged with this instance name
instance_name: "default_memory_instance"

# the endpoint used for all api requests
operation_queue: "localhost:8980"

# all content for the operations will be stored under this path
root: "/tmp/worker"

# the local cache location relative to the 'root', or absolute
cas_cache_directory: "cache"

# whether the stdout of running processes should be streamed
stream_stdout: true

# policy control for stdout in results injection and CAS
stdout_cas_control: {
  # maximum content size above which inlined output will not be present
  limit: 16384 # 1024 * 16

  # whether to insert stdout into the CAS, can be:
  #   ALWAYS_INSERT: stdout is always inserted into the CAS
  #   INSERT_ABOVE_LIMIT: stdout is inserted into the CAS when it exceeds the inline limit above
  #   NEVER_INSERT: stdout is never inserted into the CAS
  policy: ALWAYS_INSERT
}

# whether the stderr of running processes should be streamed
stream_stderr: true

# policy control for stderr in results injection and CAS
stderr_cas_control: {
  # maximum content size above which inlined output will not be present
  limit: 16384 # 1024 * 16

  # whether to insert stderr into the CAS, can be:
  #   ALWAYS_INSERT: stderr is always inserted into the CAS
  #   INSERT_ABOVE_LIMIT: stderr is inserted into the CAS when it exceeds the inline limit above
  #   NEVER_INSERT: stderr is never inserted into the CAS
  policy: ALWAYS_INSERT
}

# policy control for output files
file_cas_control: {
  # maximum content size which inlined output will not be present
  limit: 16384 # 1024 * 16

  # whether to insert output files into the CAS, can be:
  #   ALWAYS_INSERT: output files are always inserted into the CAS
  #   INSERT_ABOVE_LIMIT: output files are inserted into the CAS when it exceeds the inline limit above
  #   NEVER_INSERT: output files are never inserted into the CAS
  policy: ALWAYS_INSERT
}

# the worker will take it upon itself to requeue (exceptionally)
# failed operations via the OperationQueue#put method with queued
# status.
requeue_on_failure: true

# ContentAddressableStorage#getTree per-page directory count
# value of '0' means let the server decide
tree_page_size: 0

# the period between poll operations at any stage
operation_poll_period: {
  seconds: 1
  nanos: 0
}

# key/value set of definining capabilities of this worker
# all execute requests must match perfectly with workers which
# provide capabilities
# so an action with a required platform: { arch: "x86_64" } must
# match with a worker with at least { arch: "x86_64" } here
platform: {
  # commented out here for illustrative purposes, a default empty
  # 'platform' is a sufficient starting point without specifying
  # any platform requirements on the actions' side
  ###
  # property: {
  #   name: "key_name"
  #   value: "value_string"
  # }
}

# limit for contents of files retained
# from CAS in the cache
cas_cache_max_size_bytes: 2147483648 # 2 * 1024 * 1024 * 1024

